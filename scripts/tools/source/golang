#
# Installs go
#
# This file is sourced
#

GOLANG_VERSION=go1.17.7
GOLANG_CMD=go

golang_check() {
	GOLANG=$(which "${GOLANG_CMD}")
	if [ $? -ne 0 ]
	then
    		log_warn "Please install ${GOLANG_CMD}"
	else
		VERSION=$(golang_version)
    		log_info "$VERSION available at $GOLANG"
		if [ "${VERSION}" != "${GOLANG_VERSION}" ]
		then
			log_warn "Please install ${GOLANG_CMD} ${GOLANG_VERSION}"
		fi
	fi
}

# TODO : install for different architectures - fixed at amd64 at the moment
golang_install() {
	GOLANG=$(which "${GOLANG_CMD}")
	if [ $? -eq 0 ]
	then
		VERSION=$(golang_version)
		if [ "${VERSION}" = "${GOLANG_VERSION}" ]
		then
			log_info "${GOLANG_CMD} ${GOLANG_VERSION} already installed"
			return	
		fi
		log_info "Upgrading ${GOLANG_CMD} from ${VERSION} to ${GOLANG_VERSION}"
	else
		log_info "Installing ${GOLANG_CMD} ${GOLANG_VERSION}"
	fi
	TEMPDIR=$( mktemp -d /tmp/.golang.XXXXXXXX )

	function finalise {
    		CODE=$?
	 	log_info "Delete ${TEMPDIR}"
    		rm -rf "${TEMPDIR}"
    		exit "$CODE"
	}
	trap finalise EXIT INT TERM
	(cd "${TEMPDIR}" \
	 && log_info "Downloading ${GOLANG_CMD} ${GOLANG_VERSION}.linux-amd64.tar.gz" \
	 && curl -fOsSL "https://go.dev/dl/${GOLANG_VERSION}.linux-amd64.tar.gz" \
	 && LOCAL=$(dirname "${GOROOT}") \
	 && log_info "Delete ${GOROOT}" \
	 && rm -rf "${GOROOT}" \
	 && log_info "Install ${GOLANG_CMD} ${GOLANG_VERSION} in ${LOCAL}" \
	 && tar -C "${LOCAL}" -xzf "${GOLANG_VERSION}.linux-amd64.tar.gz" \
	)
	log_info "${GOLANG_CMD} ${GOLANG_VERSION} installed"
}

golang_version() {
	GOLANG=$(which "${GOLANG_CMD}")
	if [ $? -ne 0 ]
	then
    		log_warn "Please install ${GOLANG_CMD}"
		return
	fi
	${GOLANG_CMD} version | cut -d' ' -f3
}
