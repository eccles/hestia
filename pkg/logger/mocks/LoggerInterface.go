// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *LoggerInterface) Close() {
	_m.Called()
}

// Debug provides a mock function with given fields:
func (_m *LoggerInterface) Debug() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *LoggerInterface) Info() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *LoggerInterface) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
