// Code generated by ../../../scripts/grpcserver.sh. DO NOT EDIT.
package widgets

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/eccles/hestia/pkg/service"
)

type Service struct {
	UnimplementedWidgetsServer
	cfg service.Config
}

func (s *Service) Run() error {
	if s.cfg.GRPCServerPort != "" {
		grpcServer, err := s.StartGRPCServer()
		if err != nil {
			return fmt.Errorf("start failure: %w", err)
		}
		defer grpcServer.GracefulStop()
	}

	// wait here for termination signal
	sCh := make(chan os.Signal, 1)
	signal.Notify(sCh, syscall.SIGINT, syscall.SIGTERM)
	<-sCh

	// k8s is in charge now so undo handling of signals
	signal.Reset(syscall.SIGINT, syscall.SIGTERM)

	return nil
}
