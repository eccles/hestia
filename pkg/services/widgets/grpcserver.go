// Code generated by ../../../scripts/grpcserver.sh. DO NOT EDIT.
package widgets

import (
	"fmt"
	"net"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"

	"github.com/eccles/hestia/pkg/logger"
)

func (s *Service) StartGRPCServer(logger *logger.Logger) (*grpc.Server, error) {

	logger.Info("Start GRPCServer")
	grpcServer := grpc.NewServer()

	RegisterWidgetsServer(grpcServer, s)
	reflection.Register(grpcServer)

	listen, err := net.Listen("tcp", ":"+s.cfg.GRPCServerPort)
	if err != nil {
		return nil, fmt.Errorf("listen ':%s' failure: %w", s.cfg.GRPCServerPort, err)
	}

	go func() {
		err = grpcServer.Serve(listen)
		if err != nil {
			panic("Failed to start")
		}
	}()

	return grpcServer, nil
}
