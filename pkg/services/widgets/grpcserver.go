// Code generated by ../../../scripts/grpcserver.sh. DO NOT EDIT.
package widgets

import (
	"fmt"
	"net"

	"github.com/eccles/hestia/pkg/apis/widgets"

	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_validator "github.com/grpc-ecosystem/go-grpc-middleware/validator"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func (s *Service) StartGRPCServer() (*grpc.Server, error) {

	s.Logger.Info().Msg("Start GRPCServer")
	grpcServer := grpc.NewServer(
		grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(
			grpc_validator.UnaryServerInterceptor(),
		)),
	)


	widgetsAPI.RegisterWidgetsServer(grpcServer, s)
	reflection.Register(grpcServer)

	listen, err := net.Listen("tcp", ":"+s.GRPCServerPort)
	if err != nil {
		return nil, fmt.Errorf("listen ':%s' failure: %w", s.GRPCServerPort, err)
	}

	go func() {
		err = grpcServer.Serve(listen)
		if err != nil {
			panic("Failed to start")
		}
	}()

	return grpcServer, nil
}
