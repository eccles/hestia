// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: apis/widgets/widgets.proto

package widgetsapi

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Widgets_Create_FullMethodName   = "/widgetsapi.Widgets/Create"
	Widgets_FindByID_FullMethodName = "/widgetsapi.Widgets/FindByID"
	Widgets_List_FullMethodName     = "/widgetsapi.Widgets/List"
	Widgets_Update_FullMethodName   = "/widgetsapi.Widgets/Update"
	Widgets_Delete_FullMethodName   = "/widgetsapi.Widgets/Delete"
)

// WidgetsClient is the client API for Widgets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WidgetsClient interface {
	// create a widget
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Widget, error)
	// returns specific widget
	FindByID(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Widget, error)
	// returns list of all widgets
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// update a widget
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Widget, error)
	// delete a widget
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type widgetsClient struct {
	cc grpc.ClientConnInterface
}

func NewWidgetsClient(cc grpc.ClientConnInterface) WidgetsClient {
	return &widgetsClient{cc}
}

func (c *widgetsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Widget, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Widget)
	err := c.cc.Invoke(ctx, Widgets_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetsClient) FindByID(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Widget, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Widget)
	err := c.cc.Invoke(ctx, Widgets_FindByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Widgets_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetsClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Widget, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Widget)
	err := c.cc.Invoke(ctx, Widgets_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Widgets_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WidgetsServer is the server API for Widgets service.
// All implementations must embed UnimplementedWidgetsServer
// for forward compatibility.
type WidgetsServer interface {
	// create a widget
	Create(context.Context, *CreateRequest) (*Widget, error)
	// returns specific widget
	FindByID(context.Context, *FindRequest) (*Widget, error)
	// returns list of all widgets
	List(context.Context, *ListRequest) (*ListResponse, error)
	// update a widget
	Update(context.Context, *UpdateRequest) (*Widget, error)
	// delete a widget
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWidgetsServer()
}

// UnimplementedWidgetsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWidgetsServer struct{}

func (UnimplementedWidgetsServer) Create(context.Context, *CreateRequest) (*Widget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWidgetsServer) FindByID(context.Context, *FindRequest) (*Widget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedWidgetsServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWidgetsServer) Update(context.Context, *UpdateRequest) (*Widget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWidgetsServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWidgetsServer) mustEmbedUnimplementedWidgetsServer() {}
func (UnimplementedWidgetsServer) testEmbeddedByValue()                 {}

// UnsafeWidgetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WidgetsServer will
// result in compilation errors.
type UnsafeWidgetsServer interface {
	mustEmbedUnimplementedWidgetsServer()
}

func RegisterWidgetsServer(s grpc.ServiceRegistrar, srv WidgetsServer) {
	// If the following call pancis, it indicates UnimplementedWidgetsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Widgets_ServiceDesc, srv)
}

func _Widgets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Widgets_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Widgets_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetsServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Widgets_FindByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetsServer).FindByID(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Widgets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Widgets_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Widgets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Widgets_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetsServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Widgets_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Widgets_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Widgets_ServiceDesc is the grpc.ServiceDesc for Widgets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Widgets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "widgetsapi.Widgets",
	HandlerType: (*WidgetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Widgets_Create_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _Widgets_FindByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Widgets_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Widgets_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Widgets_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/widgets/widgets.proto",
}
